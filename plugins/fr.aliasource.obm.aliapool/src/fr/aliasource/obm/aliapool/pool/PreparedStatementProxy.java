/*
 * Created on Nov 25, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package fr.aliasource.obm.aliapool.pool;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;

/**
 * @author tom
 *
 */
public class PreparedStatementProxy
	extends AbstractStatementProxy
	implements PreparedStatement {

	private PreparedStatement ps;
	private ConnectionProxy cp;

	public PreparedStatementProxy(PreparedStatement ps, ConnectionProxy cp) {
		this.ps = ps;
		this.cp = cp;
		cp.addOpenStatement(this);
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void addBatch() throws SQLException {
		ps.addBatch();
	}

	/**
	 * @param sql
	 * @throws java.sql.SQLException
	 */
	public void addBatch(String sql) throws SQLException {
		ps.addBatch(sql);
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void cancel() throws SQLException {
		ps.cancel();
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void clearBatch() throws SQLException {
		ps.clearBatch();
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void clearParameters() throws SQLException {
		ps.clearParameters();
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void clearWarnings() throws SQLException {
		ps.clearWarnings();
	}

	/**
	 * @throws java.sql.SQLException
	 */
	public void close() throws SQLException {
		ps.close();
		cp.closeStatement(this);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean execute() throws SQLException {
		return ps.execute();
	}

	/**
	 * @param sql
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean execute(String sql) throws SQLException {
		return ps.execute(sql);
	}

	/**
	 * @param sql
	 * @param autoGeneratedKeys
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean execute(String sql, int autoGeneratedKeys)
		throws SQLException {
		return ps.execute(sql, autoGeneratedKeys);
	}

	/**
	 * @param sql
	 * @param columnIndexes
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean execute(String sql, int[] columnIndexes)
		throws SQLException {
		return ps.execute(sql, columnIndexes);
	}

	/**
	 * @param sql
	 * @param columnNames
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean execute(String sql, String[] columnNames)
		throws SQLException {
		return ps.execute(sql, columnNames);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int[] executeBatch() throws SQLException {
		return ps.executeBatch();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ResultSet executeQuery() throws SQLException {
		return new ResultSetProxy(ps.executeQuery(), this);
	}

	/**
	 * @param sql
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ResultSet executeQuery(String sql) throws SQLException {
		return new ResultSetProxy(ps.executeQuery(sql), this);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int executeUpdate() throws SQLException {
		return ps.executeUpdate();
	}

	/**
	 * @param sql
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int executeUpdate(String sql) throws SQLException {
		return ps.executeUpdate(sql);
	}

	/**
	 * @param sql
	 * @param autoGeneratedKeys
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int executeUpdate(String sql, int autoGeneratedKeys)
		throws SQLException {
		return ps.executeUpdate(sql, autoGeneratedKeys);
	}

	/**
	 * @param sql
	 * @param columnIndexes
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int executeUpdate(String sql, int[] columnIndexes)
		throws SQLException {
		return ps.executeUpdate(sql, columnIndexes);
	}

	/**
	 * @param sql
	 * @param columnNames
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int executeUpdate(String sql, String[] columnNames)
		throws SQLException {
		return ps.executeUpdate(sql, columnNames);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public Connection getConnection() throws SQLException {
		return ps.getConnection();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getFetchDirection() throws SQLException {
		return ps.getFetchDirection();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getFetchSize() throws SQLException {
		return ps.getFetchSize();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ResultSet getGeneratedKeys() throws SQLException {
		return new ResultSetProxy(ps.getGeneratedKeys(), this);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getMaxFieldSize() throws SQLException {
		return ps.getMaxFieldSize();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getMaxRows() throws SQLException {
		return ps.getMaxRows();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ResultSetMetaData getMetaData() throws SQLException {
		return ps.getMetaData();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean getMoreResults() throws SQLException {
		return ps.getMoreResults();
	}

	/**
	 * @param current
	 * @return
	 * @throws java.sql.SQLException
	 */
	public boolean getMoreResults(int current) throws SQLException {
		return ps.getMoreResults(current);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return ps.getParameterMetaData();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getQueryTimeout() throws SQLException {
		return ps.getQueryTimeout();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public ResultSet getResultSet() throws SQLException {
		return new ResultSetProxy(ps.getResultSet(), this);
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getResultSetConcurrency() throws SQLException {
		return ps.getResultSetConcurrency();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getResultSetHoldability() throws SQLException {
		return ps.getResultSetHoldability();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getResultSetType() throws SQLException {
		return ps.getResultSetType();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public int getUpdateCount() throws SQLException {
		return ps.getUpdateCount();
	}

	/**
	 * @return
	 * @throws java.sql.SQLException
	 */
	public SQLWarning getWarnings() throws SQLException {
		return ps.getWarnings();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		return ps.hashCode();
	}

	/**
	 * @param i
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setArray(int i, Array x) throws SQLException {
		ps.setArray(i, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param length
	 * @throws java.sql.SQLException
	 */
	public void setAsciiStream(int parameterIndex, InputStream x, int length)
		throws SQLException {
		ps.setAsciiStream(parameterIndex, x, length);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setBigDecimal(int parameterIndex, BigDecimal x)
		throws SQLException {
		ps.setBigDecimal(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param length
	 * @throws java.sql.SQLException
	 */
	public void setBinaryStream(int parameterIndex, InputStream x, int length)
		throws SQLException {
		ps.setBinaryStream(parameterIndex, x, length);
	}

	/**
	 * @param i
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setBlob(int i, Blob x) throws SQLException {
		ps.setBlob(i, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		ps.setBoolean(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setByte(int parameterIndex, byte x) throws SQLException {
		ps.setByte(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		ps.setBytes(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param reader
	 * @param length
	 * @throws java.sql.SQLException
	 */
	public void setCharacterStream(
		int parameterIndex,
		Reader reader,
		int length)
		throws SQLException {
		ps.setCharacterStream(parameterIndex, reader, length);
	}

	/**
	 * @param i
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setClob(int i, Clob x) throws SQLException {
		ps.setClob(i, x);
	}

	/**
	 * @param name
	 * @throws java.sql.SQLException
	 */
	public void setCursorName(String name) throws SQLException {
		ps.setCursorName(name);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setDate(int parameterIndex, Date x) throws SQLException {
		ps.setDate(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param cal
	 * @throws java.sql.SQLException
	 */
	public void setDate(int parameterIndex, Date x, Calendar cal)
		throws SQLException {
		ps.setDate(parameterIndex, x, cal);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setDouble(int parameterIndex, double x) throws SQLException {
		ps.setDouble(parameterIndex, x);
	}

	/**
	 * @param enable
	 * @throws java.sql.SQLException
	 */
	public void setEscapeProcessing(boolean enable) throws SQLException {
		ps.setEscapeProcessing(enable);
	}

	/**
	 * @param direction
	 * @throws java.sql.SQLException
	 */
	public void setFetchDirection(int direction) throws SQLException {
		ps.setFetchDirection(direction);
	}

	/**
	 * @param rows
	 * @throws java.sql.SQLException
	 */
	public void setFetchSize(int rows) throws SQLException {
		ps.setFetchSize(rows);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setFloat(int parameterIndex, float x) throws SQLException {
		ps.setFloat(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setInt(int parameterIndex, int x) throws SQLException {
		ps.setInt(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setLong(int parameterIndex, long x) throws SQLException {
		ps.setLong(parameterIndex, x);
	}

	/**
	 * @param max
	 * @throws java.sql.SQLException
	 */
	public void setMaxFieldSize(int max) throws SQLException {
		ps.setMaxFieldSize(max);
	}

	/**
	 * @param max
	 * @throws java.sql.SQLException
	 */
	public void setMaxRows(int max) throws SQLException {
		ps.setMaxRows(max);
	}

	/**
	 * @param parameterIndex
	 * @param sqlType
	 * @throws java.sql.SQLException
	 */
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		ps.setNull(parameterIndex, sqlType);
	}

	/**
	 * @param paramIndex
	 * @param sqlType
	 * @param typeName
	 * @throws java.sql.SQLException
	 */
	public void setNull(int paramIndex, int sqlType, String typeName)
		throws SQLException {
		ps.setNull(paramIndex, sqlType, typeName);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setObject(int parameterIndex, Object x) throws SQLException {
		ps.setObject(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param targetSqlType
	 * @throws java.sql.SQLException
	 */
	public void setObject(int parameterIndex, Object x, int targetSqlType)
		throws SQLException {
		ps.setObject(parameterIndex, x, targetSqlType);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param targetSqlType
	 * @param scale
	 * @throws java.sql.SQLException
	 */
	public void setObject(
		int parameterIndex,
		Object x,
		int targetSqlType,
		int scale)
		throws SQLException {
		ps.setObject(parameterIndex, x, targetSqlType, scale);
	}

	/**
	 * @param seconds
	 * @throws java.sql.SQLException
	 */
	public void setQueryTimeout(int seconds) throws SQLException {
		ps.setQueryTimeout(seconds);
	}

	/**
	 * @param i
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setRef(int i, Ref x) throws SQLException {
		ps.setRef(i, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setShort(int parameterIndex, short x) throws SQLException {
		ps.setShort(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setString(int parameterIndex, String x) throws SQLException {
		ps.setString(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setTime(int parameterIndex, Time x) throws SQLException {
		ps.setTime(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param cal
	 * @throws java.sql.SQLException
	 */
	public void setTime(int parameterIndex, Time x, Calendar cal)
		throws SQLException {
		ps.setTime(parameterIndex, x, cal);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setTimestamp(int parameterIndex, Timestamp x)
		throws SQLException {
		ps.setTimestamp(parameterIndex, x);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @param cal
	 * @throws java.sql.SQLException
	 */
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
		throws SQLException {
		ps.setTimestamp(parameterIndex, x, cal);
	}

	/**
	 * @deprecated
	 * @param parameterIndex
	 * @param x
	 * @param length
	 * @throws java.sql.SQLException
	 */
	public void setUnicodeStream(int parameterIndex, InputStream x, int length)
		throws SQLException {
		ps.setUnicodeStream(parameterIndex, x, length);
	}

	/**
	 * @param parameterIndex
	 * @param x
	 * @throws java.sql.SQLException
	 */
	public void setURL(int parameterIndex, URL x) throws SQLException {
		ps.setURL(parameterIndex, x);
	}

	public boolean isClosed() throws SQLException {
		return ps.isClosed();
	}

	public boolean isPoolable() throws SQLException {
		return ps.isPoolable();
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return ps.isWrapperFor(iface);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		ps.setAsciiStream(parameterIndex, x, length);
	}

	public void setAsciiStream(int parameterIndex, InputStream x)
			throws SQLException {
		ps.setAsciiStream(parameterIndex, x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		ps.setBinaryStream(parameterIndex, x, length);
	}

	public void setBinaryStream(int parameterIndex, InputStream x)
			throws SQLException {
		ps.setBinaryStream(parameterIndex, x);
	}

	public void setBlob(int parameterIndex, InputStream inputStream, long length)
			throws SQLException {
		ps.setBlob(parameterIndex, inputStream, length);
	}

	public void setBlob(int parameterIndex, InputStream inputStream)
			throws SQLException {
		ps.setBlob(parameterIndex, inputStream);
	}

	public void setCharacterStream(int parameterIndex, Reader reader,
			long length) throws SQLException {
		ps.setCharacterStream(parameterIndex, reader, length);
	}

	public void setCharacterStream(int parameterIndex, Reader reader)
			throws SQLException {
		ps.setCharacterStream(parameterIndex, reader);
	}

	public void setClob(int parameterIndex, Reader reader, long length)
			throws SQLException {
		ps.setClob(parameterIndex, reader, length);
	}

	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		ps.setClob(parameterIndex, reader);
	}

	public void setNCharacterStream(int parameterIndex, Reader value,
			long length) throws SQLException {
		ps.setNCharacterStream(parameterIndex, value, length);
	}

	public void setNCharacterStream(int parameterIndex, Reader value)
			throws SQLException {
		ps.setNCharacterStream(parameterIndex, value);
	}

	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		ps.setNClob(parameterIndex, value);
	}

	public void setNClob(int parameterIndex, Reader reader, long length)
			throws SQLException {
		ps.setNClob(parameterIndex, reader, length);
	}

	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		ps.setNClob(parameterIndex, reader);
	}

	public void setNString(int parameterIndex, String value)
			throws SQLException {
		ps.setNString(parameterIndex, value);
	}

	public void setPoolable(boolean poolable) throws SQLException {
		ps.setPoolable(poolable);
	}

	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		ps.setRowId(parameterIndex, x);
	}

	public void setSQLXML(int parameterIndex, SQLXML xmlObject)
			throws SQLException {
		ps.setSQLXML(parameterIndex, xmlObject);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return ps.unwrap(iface);
	}

}
